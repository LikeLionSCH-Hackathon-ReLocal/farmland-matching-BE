name: BE CI/CD to EC2 (Docker + GHCR + Secrets)

on:
  push:
    branches: [ "main", "develop" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      APP_DIR: /opt/hackathon
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/farmland-matching-be
      TAG_LATEST: latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify files exist (before upload)
        run: |
          echo "PWD: $(pwd)"; ls -al
          ls -al infra || true
          test -f ./infra/docker-compose.yml || { echo "::error::missing ./infra/docker-compose.yml"; exit 1; }
          test -f ./infra/nginx/app.conf     || { echo "::error::missing ./infra/nginx/app.conf"; exit 1; }

      - name: Prepare dirs on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo mkdir -p /opt/hackathon/nginx
            sudo chown -R $USER:$USER /opt/hackathon

      - name: Login to GHCR (push)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image
        run: |
          docker build -t $IMAGE_NAME:$TAG_LATEST .
          docker push $IMAGE_NAME:$TAG_LATEST

      - name: Show files
        run: |
          pwd
          ls -al
          ls -al infra/nginx || true

  # 원격에 디렉터리 미리 생성
      - name: Prepare dirs on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_KEY }}
          script: |
            sudo mkdir -p /opt/hackathon/nginx
            sudo chown -R $USER:$USER /opt/hackathon

  # docker-compose.yml 업로드
      - name: Upload compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./infra/docker-compose.yml"       # ← 경로 수정
          target: "/opt/hackathon/"
          overwrite: true

      - name: Upload nginx conf to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./infra/nginx/app.conf"           # ← 그대로 infra 경로
          target: "/opt/hackathon/nginx/"
          overwrite: true

      # 원격 배포: .env 생성(Secrets 주입) -> compose pull/up
      - name: Remote deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: APP_DIR                          # APP_DIR=/opt/hackathon 을 job env로 지정해둔 상태 가정
          script_stop: true
          command_timeout: 20m
          script: |
            set -Eeuo pipefail
            trap 'echo "[ERR] line:$LINENO exit:$?"' ERR

            echo "[INFO] APP_DIR=$APP_DIR"
            sudo mkdir -p "$APP_DIR/nginx" "$APP_DIR/fe-build"
            sudo chown -R $USER:$USER "$APP_DIR"
            cd "$APP_DIR"

            # --- .env를 안전하게 echo로 작성 (heredoc 금지) ---
            : > .env
            echo "TZ=Asia/Seoul" >> .env
            echo "COMPOSE_PROJECT_NAME=hackathon" >> .env
            echo "GHCR_OWNER=${{ github.repository_owner }}" >> .env

            # DB (두 이름 세트 모두 채움: POSTGRES_* / DB_*)
            echo "POSTGRES_DB=${{ secrets.DB_NAME }}" >> .env
            echo "POSTGRES_USER=${{ secrets.DB_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

            # BE
            echo "APP_PORT=8080" >> .env
            echo "SPRING_PROFILES_ACTIVE=prod" >> .env
            echo "SERVER_SERVLET_CONTEXT_PATH=/farmland" >> .env
            echo "SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${{ secrets.DB_NAME }}" >> .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "JAVA_OPTS=-Xms256m -Xmx512m" >> .env

            # Supabase
            echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
            echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
            echo "SUPABASE_BUCKET=${{ secrets.SUPABASE_BUCKET }}" >> .env

            echo "[INFO] .env written ($(wc -l < .env) lines)"

            # docker compose 유무 감지
            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            elif docker-compose version >/dev/null 2>&1; then
              DC="docker-compose"
            else
              echo "[ERROR] docker compose not installed"; exit 3
            fi
            echo "[INFO] Using: $DC"

            docker network create app-net 2>/dev/null || true

            # GHCR(private) pull 필요시
            if [ -n "${{ secrets.GHCR_READ_TOKEN }}" ] && [ -n "${{ secrets.GHCR_USERNAME }}" ]; then
              echo "${{ secrets.GHCR_READ_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
            fi
            
            # --- nginx 이름 충돌 사전 정리 ---
            if docker ps -a --format '{{.Names}}' | grep -qx hackathon-nginx; then
              label=$(docker inspect -f '{{ index .Config.Labels "com.docker.compose.project" }}' hackathon-nginx || true)

              # (옵션) 정적파일/설정 백업
              mkdir -p fe-build nginx
              docker cp hackathon-nginx:/usr/share/nginx/html/. ./fe-build/ >/dev/null 2>&1 || true
              docker cp hackathon-nginx:/etc/nginx/conf.d/default.conf ./nginx/app.conf >/dev/null 2>&1 || true

              if [ "$label" = "hackathon" ]; then
                echo "[INFO] removing compose-managed nginx"
                $DC rm -sf nginx || true
              else
                echo "[INFO] removing non-compose nginx"
                docker rm -f hackathon-nginx || true
              fi
            fi
  
            echo "[INFO] services:"; $DC config --services
            echo "[INFO] first 80 lines of resolved config:"; $DC config | sed -n '1,80p'

            $DC pull
            $DC up -d

            $DC ps
            docker logs --tail=120 hackathon-app || true

            docker image prune -f
