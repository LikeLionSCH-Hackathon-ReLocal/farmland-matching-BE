name: BE CI/CD to EC2 (Docker + GHCR + Secrets)

on:
  push:
    branches: [ "main", "develop" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/farmland-matching-be
      TAG_LATEST: latest
      APP_DIR: /opt/hackathon

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify files exist (before upload)
        run: |
          echo "PWD: $(pwd)"
          ls -al
          test -f ./docker-compose.yml || (echo "::error::missing docker-compose.yml at repo root" && exit 1)
          test -f ./infra/nginx/app.conf || (echo "::error::missing infra/nginx/app.conf" && exit 1)

      - name: Prepare dirs on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_KEY }}
          script: |
            sudo mkdir -p /opt/hackathon/nginx
            sudo chown -R $USER:$USER /opt/hackathon

      - name: Upload compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_KEY }}
          source: "./docker-compose.yml"         # ← 레포 루트의 정확한 경로
          target: "/opt/hackathon/"
          overwrite: true

      - name: Upload nginx conf to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./infra/nginx/app.conf"       # ← 레포 내 실제 경로
          target: "/opt/hackathon/nginx/"
          overwrite: true


      - name: Login to GHCR (push)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image
        run: |
          docker build -t $IMAGE_NAME:$TAG_LATEST .
          docker push $IMAGE_NAME:$TAG_LATEST

      - name: Show files
        run: |
          pwd
          ls -al
          ls -al infra/nginx || true

  # 원격에 디렉터리 미리 생성
      - name: Prepare dirs on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_KEY }}
          script: |
            sudo mkdir -p /opt/hackathon/nginx
            sudo chown -R $USER:$USER /opt/hackathon

  # docker-compose.yml 업로드
      - name: Upload compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml"
          target: "/opt/hackathon/"
          overwrite: true

  # nginx/app.conf 업로드 (레포 경로: infra/nginx/app.conf)
      - name: Upload nginx conf to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_KEY }}
          source: "infra/nginx/app.conf"
          target: "/opt/hackathon/nginx/"
          overwrite: true

      # 인프라 파일 전송(docker-compose.yml, nginx conf)
      - name: Upload infra to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_KEY }}
          source: |
            docker-compose.yml
            nginx/app.conf
          target: ${{ env.APP_DIR }}
          overwrite: true

      # 원격 배포: .env 생성(Secrets 주입) -> compose pull/up
      - name: Remote deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            mkdir -p $APP_DIR/nginx $APP_DIR/fe-build
            cd $APP_DIR

            # .env 생성(Secrets 반영)
            cat > .env <<'ENV'
            TZ=Asia/Seoul
            COMPOSE_PROJECT_NAME=hackathon
            GHCR_OWNER=${{ github.repository_owner }}

            # DB
            POSTGRES_DB=${{ secrets.DB_NAME }}
            POSTGRES_USER=${{ secrets.DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}

            # BE
            APP_PORT=8080
            SPRING_PROFILES_ACTIVE=prod
            SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${POSTGRES_DB}
            SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
            SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
            JAVA_OPTS=-Xms256m -Xmx512m

            # Supabase (필요 시 BE에서 사용)
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
            SUPABASE_BUCKET=${{ secrets.SUPABASE_BUCKET }}
            ENV

            # 네트워크 준비
            docker network create app-net 2>/dev/null || true

            # GHCR 로그인 (private pull이 필요한 경우)
            if [ -n "${{ secrets.GHCR_USERNAME }}" ] && [ -n "${{ secrets.GHCR_READ_TOKEN }}" ]; then
              echo "${{ secrets.GHCR_READ_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
            fi

            # 최신 이미지 받고 기동
            docker compose pull backend
            docker compose up -d db backend nginx
            docker compose ps
            docker logs --tail=50 hackathon-app || true

            # 청소
            docker image prune -f
