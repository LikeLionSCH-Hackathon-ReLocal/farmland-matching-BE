name: BE CI/CD to EC2 (Docker + GHCR + Secrets)

on:
  push:
    branches: [ "main", "develop" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      APP_DIR: /opt/hackathon
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/farmland-matching-be
      TAG_LATEST: latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify files exist (before upload)
        run: |
          echo "PWD: $(pwd)"; ls -al
          ls -al infra || true
          test -f ./infra/docker-compose.yml || { echo "::error::missing ./infra/docker-compose.yml"; exit 1; }
          test -f ./infra/nginx/app.conf     || { echo "::error::missing ./infra/nginx/app.conf"; exit 1; }

      - name: Prepare dirs on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo mkdir -p /opt/hackathon/nginx
            sudo chown -R $USER:$USER /opt/hackathon

      - name: Login to GHCR (push)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image
        run: |
          docker build -t $IMAGE_NAME:$TAG_LATEST .
          docker push $IMAGE_NAME:$TAG_LATEST

      - name: Show files
        run: |
          pwd
          ls -al
          ls -al infra/nginx || true

  # 원격에 디렉터리 미리 생성
      - name: Prepare dirs on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key:      ${{ secrets.SSH_KEY }}
          script: |
            sudo mkdir -p /opt/hackathon/nginx
            sudo chown -R $USER:$USER /opt/hackathon

  # docker-compose.yml 업로드
      - name: Upload compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./infra/docker-compose.yml"       # ← 경로 수정
          target: "/opt/hackathon/"
          overwrite: true

      - name: Upload nginx conf to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./infra/nginx/app.conf"           # ← 그대로 infra 경로
          target: "/opt/hackathon/nginx/"
          overwrite: true

      # 원격 배포: .env 생성(Secrets 주입) -> compose pull/up
      - name: Remote deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: APP_DIR
          script_stop: true
          script: |
            set -e
            # 1) 디렉터리 준비
            sudo mkdir -p "$APP_DIR/nginx" "$APP_DIR/fe-build"
            sudo chown -R $USER:$USER "$APP_DIR"
            cd "$APP_DIR"

            # 2) .env 생성(두 세트 모두 넣어서 변수 불일치 방지)
            cat > .env <<'ENV'
            TZ=Asia/Seoul
            COMPOSE_PROJECT_NAME=hackathon
            GHCR_OWNER=${{ github.repository_owner }}

            # --- DB (두 이름 세트 모두 채움) ---
            POSTGRES_DB=${{ secrets.DB_NAME }}
            POSTGRES_USER=${{ secrets.DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}

            # --- BE ---
            APP_PORT=8080
            SPRING_PROFILES_ACTIVE=prod
            SERVER_SERVLET_CONTEXT_PATH=/farmland
            SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${{ secrets.DB_NAME }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
            JAVA_OPTS=-Xms256m -Xmx512m

            # --- Supabase ---
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
            SUPABASE_BUCKET=${{ secrets.SUPABASE_BUCKET }}
            ENV

            # 3) 네트워크/로그인
            docker network create app-net 2>/dev/null || true
            if [ -n "${{ secrets.GHCR_READ_TOKEN }}" ] && [ -n "${{ secrets.GHCR_USERNAME }}" ]; then
              echo "${{ secrets.GHCR_READ_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
            fi

            # 4) 서비스 이름에 의존하지 않게 전체 pull/up
            docker compose config --services
            docker compose pull
            docker compose up -d

            # 5) 상태 확인
            docker compose ps
            docker logs --tail=80 hackathon-app || true
            docker image prune -f